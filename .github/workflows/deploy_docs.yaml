name: Deploy Docs

on:
  push:
    tags:
      - v*
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-20.04

    steps:
      - name: clone docs
        uses: actions/checkout@v2
        with:
          path: docs-files

      - name: update embedded file
        run: |
          git clone https://github.com/hstreamdb/hstreamdb-java-examples.git
          git clone https://github.com/hstreamdb/hstreamdb-go-examples.git
          git clone https://github.com/hstreamdb/hstreamdb-py.git
          mkdir temp
          mv $PWD/hstreamdb-java-examples/app/src/main/java/docs/code/examples/* $PWD/temp/
          mv $PWD/hstreamdb-go-examples/examples/* $PWD/temp/
          npm install embedme
          npx embedme --source-root $PWD/docs-files/assets docs-files/docs/*/start/quickstart-with-docker.md
          npx embedme --source-root $PWD/temp/ docs-files/docs/*/guides/*
          cd docs-files && ./include_snippets.py --snippets-root .. --file-pattern "docs/*/guides/*"

      - name: make directory.json
        run: cd docs-files && make config

      - name: clone frontend
        uses: actions/checkout@v2
        with:
          repository: "emqx/emqx-io-docs-frontend"
          token: ${{ secrets.CI_GIT_TOKEN }}
          path: frontend

      - name: use node.js
        uses: actions/setup-node@v1
        with:
          node-version: 14.15

      - name: set env
        run: |
          BRANCH=$(echo ${{ github.ref }} | sed -r  "s ^refs/heads/|^refs/tags/(.*) \1 g")
          if [ "$BRANCH" = "main" ];then
          VERSION="latest"
          else
          VERSION=$BRANCH
          fi
          echo "DOCS_BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "DOCS_TYPE=hstreamdb" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: move files
        run: |
          rm frontend/docs/en/README.md || true
          rm frontend/docs/zh/README.md || true
          rm frontend/docs/*.md || true
          rm frontend/README.md
          mkdir -p frontend/docs/en/${VERSION}/
          mkdir -p frontend/docs/zh/${VERSION}/
          mkdir -p frontend/docs/.vuepress/public/api/
          cp -r docs-files/docs/en/* frontend/docs/en/${VERSION}/
          cp -r docs-files/docs/zh/* frontend/docs/zh/${VERSION}/
          cp docs-files/docs/directory.json frontend/docs/.vuepress/config/directory.json
          echo "[\"latest\"]" > frontend/docs/.vuepress/public/api/${DOCS_TYPE}_versions.json

      - name: build docs
        run: |
          cd frontend
          yarn && yarn build

      - name: upload dist
        if: github.event_name == 'push'
        run: |
          cd frontend/docs/.vuepress/
          wget http://gosspublic.alicdn.com/ossutil/1.7.8/ossutil64
          chmod 755 ./ossutil64
          ./ossutil64 config -e https://oss-accelerate.aliyuncs.com -i ${{ secrets.ALI_OSS_ACCESSKEY_ID }} -k ${{ secrets.ALI_OSS_ACCESSKEY_SECRET }} -L CH
          ./ossutil64 rm -r -f oss://hstream-io-docs/docs/zh/${VERSION}/
          ./ossutil64 rm -r -f oss://hstream-io-docs/docs/en/${VERSION}/
          ./ossutil64 cp -r dist/ oss://hstream-io-docs/docs/ -u

      - name: update search index
        uses: Swilder-M/docsearch-scraper-simple@v2
        if: env.VERSION == 'latest' && github.event_name == 'push'
        env:
          APPLICATION_ID: ${{ secrets.ALGOLIA_APPLICATION_ID }}
          API_KEY: ${{ secrets.ALGOLIA_API_KEY }}
        with:
          docs_type: ${{ env.DOCS_TYPE }}
          docs_version: ${{ env.VERSION }}
