name: ci

on:
  push:
    branches: [main, release*]

  pull_request:
    branches: [main, release*]

jobs:
  markdown-link-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          folder-path: "./docs"

  quick-start:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: pull images
        run: docker-compose -f assets/quick-start.yaml pull

      - name: quick start a hstream cluster
        run: ./tests/start_cluster.sh

      - name: test simple sql
        run: ./tests/test_quick_start.sh

  test-scripts:
    runs-on: ubuntu-20.04

    steps:
      - name: clone docs
        uses: actions/checkout@v2
        with:
          path: docs-files
          fetch-depth: 0

      - name: update embedded file
        run: |
          mkdir temp
          mv docs-files/examples/java/app/src/main/java/docs/code/examples/* $PWD/temp/
          mv docs-files/examples/go/examples/* $PWD/temp/
          npm install embedme
          npx embedme --source-root $PWD/docs-files/assets docs-files/docs/*/start/quickstart-with-docker.md
          npx embedme --source-root $PWD/temp/ docs-files/docs/*/guides/*
          cd docs-files && ./include_snippets.py --snippets-root . --file-pattern "docs/*/guides/*"

      - name: make directory.json
        run: cd docs-files && make config

  test-java-examples:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./examples/java
    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: "11"
          distribution: "adopt"

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1

      - run: ./gradlew spotlessJavaCheck

      - name: Start cluster
        run: |
          docker compose -f ../../assets/quick-start.yaml up -d
          sleep 5
          ../../wait_hserver.sh

      - run: ./gradlew run

  test-go-examples:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./examples/go
    strategy:
      matrix:
        go-version: ["1.19"]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: "recursive"

      - uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}

      - name: check go fmt
        run: |
          go fmt ./... && \
          git diff-index --exit-code HEAD

      - name: check go build
        run: |
          go build github.com/hstreamdb/hstreamdb-go-examples

      - name: test
        run: |
          ./etc/start.sh && \
          ./hstreamdb-go-examples

  test-python-examples:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Start cluster
        run: |
          docker compose -f ./assets/quick-start.yaml up -d
          sleep 5
          ./wait_hserver.sh

      - name: Run examples
        run: |
          python3 -m pip install hstreamdb
          python3 examples/py/snippets/guides.py
